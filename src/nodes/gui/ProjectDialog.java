/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PnlGeneralSettings.java
 *
 * Created on 14-jan-2010, 9.18.57
 */
package nodes.gui;

import connection.Kernel;
import connection.XMLCommands.Cmd;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import nodes.FieldChecker;

/**
 *
 * @author amirrix
 */
public class ProjectDialog extends javax.swing.JPanel implements ActionListener {


    private JDialog dialog;

    /** Creates new form PnlGeneralSettings */
    public ProjectDialog() {
        initComponents();

        clearTable(tableInput);
        clearTable(tableInterfacce);
        clearTable(tableOutput);

        SetupButtons();

        center();

        txtIPAddress.setText("127.0.0.1");
        DefaultTableModel tableModel = ((DefaultTableModel) tableInterfacce.getModel());
        tableModel.addRow(new Object[][]{});
        tableModel.setValueAt(txtIPAddress.getText(),
                                tableModel.getRowCount() - 1,
                                0);
        tableModel.setValueAt(new Integer( tableModel.getRowCount() - 1 +10000).toString(),
                                tableModel.getRowCount() - 1,
                                1);

        txtIPAddress.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void changedUpdate(DocumentEvent e) {
                // text was changed
                updateServerPorts();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                // text was deleted
                updateServerPorts();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                // text was inserted
                updateServerPorts();
            }
        });

        invalidate();
    }

    private void updateServerPorts(){
        DefaultTableModel tableModel = (DefaultTableModel) tableInterfacce.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++){
            tableModel.setValueAt(txtIPAddress.getText(), i, 0);
        }

        tableInterfacce.validate();

        tableModel = (DefaultTableModel) tableInput.getModel();

        for (int i = 0; i < tableModel.getRowCount(); i++){
            tableModel.setValueAt(txtIPAddress.getText(), i, 0);
        }

        tableInput.validate();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInterfacce = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableInput = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableOutput = new javax.swing.JTable();
        btnInterfAdd = new javax.swing.JButton();
        btnInsertInterf = new javax.swing.JButton();
        btnInputAdd = new javax.swing.JButton();
        btnInsertInput = new javax.swing.JButton();
        btnOutAdd = new javax.swing.JButton();
        btnInsertOut = new javax.swing.JButton();
        btnDelInterface = new javax.swing.JButton();
        btnDelInput = new javax.swing.JButton();
        btnDelOutput = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtIPAddress = new javax.swing.JTextField();
        btnChangeIP = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUpdateTime = new javax.swing.JTextField();
        comboDebugLevel = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Interfaces"));

        jLabel5.setText("Interfaces:");

        tableInterfacce.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "IP", "Port"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableInterfacce);

        jLabel6.setText("Input:");

        tableInput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "IP", "Port"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableInput);

        jLabel7.setText("Output:");

        tableOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "IP", "Port", "MinAddr", "MaxAddr"
            }
        ));
        jScrollPane3.setViewportView(tableOutput);

        btnInterfAdd.setText("Add");

        btnInsertInterf.setText("Ins.");

        btnInputAdd.setText("Add");

        btnInsertInput.setText("Ins.");

        btnOutAdd.setText("Add");

        btnInsertOut.setText("Ins.");

        btnDelInterface.setText("Del");

        btnDelInput.setText("Del");

        btnDelOutput.setText("Del");

        jLabel3.setText("IP Address:");

        txtIPAddress.setColumns(11);
        txtIPAddress.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtIPAddress.setText("127.0.0.1");

        btnChangeIP.setText("Cambia IP");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(btnOutAdd)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelOutput)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                                    .addComponent(btnInsertOut))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)))
                        .addGap(138, 138, 138))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(btnInterfAdd)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelInterface)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnInsertInterf))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangeIP)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(btnInputAdd)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelInput)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnInsertInput))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChangeIP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInterfAdd)
                            .addComponent(btnInsertInterf)
                            .addComponent(btnDelInterface)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInputAdd)
                            .addComponent(btnInsertInput)
                            .addComponent(btnDelInput))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOutAdd)
                    .addComponent(btnInsertOut)
                    .addComponent(btnDelOutput))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        jLabel1.setText("Min. Update Time (ms) :");

        txtUpdateTime.setColumns(5);
        txtUpdateTime.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtUpdateTime.setText("2000");

        comboDebugLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Messages", "Minimum", "Medium", "Full" }));

        jLabel2.setText("Debug Messages :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboDebugLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(333, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboDebugLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/raspyprog/resources/icons_big/exit.png"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClose)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnClose)
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        //Devo controllare i singoli campi immessi:
        if (!FieldChecker.checkStringIsNumeric(txtUpdateTime.getText(), "Il campo UpdateTime NON e' un numero")){
            return;
        }

        if (Integer.parseInt(txtUpdateTime.getText()) < 0){
            JOptionPane.showMessageDialog(null, "Inserire un numero maggiore di zero nel campo UpdateTime", "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Ora controllo le singole tabelle:
        if (!checkTable(INPUT_TABLE)){

            return;
        }

        if (!checkTable(INTERFACES_TABLE)){
            return;
        }

        if (!checkTable(OUTPUT_TABLE)){
            return;
        }

        if (tableInterfacce.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Inserire una porta di interfaccia per garantire la connettività", 
                                          "Errore",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        dialog.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private boolean checkTable(int table){
        DefaultTableModel tableModel;
        String tableName;

        if (table == INPUT_TABLE){
            tableModel = (DefaultTableModel)tableInput.getModel();
            tableName = "Input";
        }
        else if (table == INTERFACES_TABLE){
            tableModel = (DefaultTableModel)tableInterfacce.getModel();
            tableName = "Interfacce";
        }
        else if (table == OUTPUT_TABLE){
            tableModel = (DefaultTableModel)tableOutput.getModel();
            tableName = "Output";
        }
        else {
            return false;
        }


        for (int i = 0; i < tableModel.getRowCount(); i++){

            try {
                if (!FieldChecker.isValidIP(((Vector)tableModel.getDataVector().elementAt(i)).elementAt(0).toString(),
                        "Indirizzo IP errato alla riga "+(i+1)+"\nnella tabella "+tableName)){
                    return false;
                }

                if (!FieldChecker.checkStringIsNumeric(((Vector)tableModel.getDataVector().elementAt(i)).elementAt(1).toString(),
                        "Indirizzo IP errato alla riga "+(i+1)+"\nnella tabella "+tableName)) {
                    return false;
                }

                int port = Integer.parseInt(((Vector)tableModel.getDataVector().elementAt(i)).elementAt(1).toString());
                if ((port <= 0) || (port > 65000)) {
                    JOptionPane.showMessageDialog(null, "Numero porta errato alla riga "+(i+1)+"\nnella tabella "+tableName,
                                                  "Errore",
                                                  JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
            catch (Exception ex){
                JOptionPane.showMessageDialog(null, "La tabella "+tableName+" contiene degli errori.",
                                                  "Errore",
                                                  JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnChangeIP;
    public javax.swing.JButton btnClose;
    public javax.swing.JButton btnDelInput;
    public javax.swing.JButton btnDelInterface;
    public javax.swing.JButton btnDelOutput;
    public javax.swing.JButton btnInputAdd;
    public javax.swing.JButton btnInsertInput;
    public javax.swing.JButton btnInsertInterf;
    public javax.swing.JButton btnInsertOut;
    public javax.swing.JButton btnInterfAdd;
    public javax.swing.JButton btnOutAdd;
    public javax.swing.JComboBox comboDebugLevel;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTable tableInput;
    public javax.swing.JTable tableInterfacce;
    public javax.swing.JTable tableOutput;
    public javax.swing.JTextField txtIPAddress;
    public javax.swing.JTextField txtUpdateTime;
    // End of variables declaration//GEN-END:variables


    private void clearTable(JTable table){
        //Pulisco la tabella
        int nOfRows = ((DefaultTableModel) table.getModel()).getRowCount();
        if (nOfRows > 0) {
            for (int row = 0; row < nOfRows; row++) {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
        }
    }

    private void center(){
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        Rectangle frame = getBounds();
        setLocation((screen.width - frame.width)/2, (screen.height - frame.height)/2);
    }

    private void SetupButtons() {
        //Per ora disabilito la cosa delle tabelle
        btnInputAdd.addActionListener(this);
        btnInsertInput.addActionListener(this);
        btnInterfAdd.addActionListener(this);
        btnOutAdd.addActionListener(this);
        btnInsertOut.addActionListener(this);
        btnDelInput.addActionListener(this);
        btnDelInterface.addActionListener(this);
        btnDelOutput.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnInputAdd){
            addRow(INPUT_TABLE);
        }
        else if (e.getSource() == btnInterfAdd) {
            addRow(INTERFACES_TABLE);
        }
        else if (e.getSource() == btnOutAdd) {
            addRow(OUTPUT_TABLE);
        }
        else if (e.getSource() == btnDelInput) {
            deleteRow(INPUT_TABLE);
        }
        else if (e.getSource() == btnDelInterface) {
            deleteRow(INTERFACES_TABLE);
        }
        else if (e.getSource() == btnDelOutput) {
            deleteRow(OUTPUT_TABLE);
        }
        else if (e.getSource() == btnInsertInput) {
            
            insertRow(INPUT_TABLE);
        }
        else if (e.getSource() == btnInsertInterf) {
            insertRow(INTERFACES_TABLE);
        }
        else if (e.getSource() == btnInsertOut) {
            insertRow(OUTPUT_TABLE);
        }
    }


    /**
     * Rende visibile il pannello con le costanti
     * @param f Frame genitore
     */
    public void showDialog(JFrame f){
            if (dialog == null || dialog.getOwner() != f) {
                    dialog = new JDialog(f,true);
                    dialog.getContentPane().add(this);
            }

            dialog.setSize(new Dimension(570,600));
            dialog.setResizable(false);
            dialog.setTitle("Project Settings");
            dialog.setVisible(true);
    }

    public static int INTERFACES_TABLE=1;
    public static int INPUT_TABLE=2;
    public static int OUTPUT_TABLE=3;

    private void addRow(int table) {

        DefaultTableModel tableModel;

        if (table == INPUT_TABLE){
            tableModel = ((DefaultTableModel) tableInput.getModel());
            tableModel.addRow(new Object[][]{});
            tableModel.setValueAt(txtIPAddress.getText(),
                                    tableModel.getRowCount() - 1,
                                    0);
            tableModel.setValueAt(new Integer( tableModel.getRowCount() - 1 +20000).toString(),
                                    tableModel.getRowCount() - 1,
                                    1);
        }
        else if (table == OUTPUT_TABLE){
            tableModel = ((DefaultTableModel) tableOutput.getModel());

            tableModel.addRow(new Object[][]{});
            tableModel.setValueAt("1",
                                tableModel.getRowCount() - 1,
                                2);
            tableModel.setValueAt("9999",
                                tableModel.getRowCount() - 1,
                                3);
        }
        else {
            tableModel = ((DefaultTableModel) tableInterfacce.getModel());

            tableModel.addRow(new Object[][]{});
            tableModel.setValueAt(txtIPAddress.getText(),
                                tableModel.getRowCount() - 1,
                                0);
            tableModel.setValueAt(new Integer( tableModel.getRowCount() - 1 +10000).toString(),
                                tableModel.getRowCount() - 1,
                                1);
        }
        
    }

    private void insertRow(int table) {
        DefaultTableModel tableModel;
        int selectedRow = -1, rowCount = 0;

        if (table == INPUT_TABLE){
            tableModel = ((DefaultTableModel) tableInput.getModel());
            selectedRow = tableInput.getSelectedRow();
            rowCount = tableInput.getRowCount();
        }
        else if (table == OUTPUT_TABLE){
            tableModel = ((DefaultTableModel) tableOutput.getModel());
            selectedRow = tableOutput.getSelectedRow();
            rowCount = tableOutput.getRowCount();
        }
        else{
            tableModel = ((DefaultTableModel) tableInterfacce.getModel());
            selectedRow = tableInterfacce.getSelectedRow();
            rowCount = tableInterfacce.getRowCount();
        }

        if (selectedRow >= 0) {
            tableModel.insertRow(selectedRow, new Object[]{""});
        } else if (rowCount == 0) {
            tableModel.addRow(new Object[]{""});
        }
    }

    private void deleteRow(int table) {
        DefaultTableModel tableModel;
        int selectedRow = -1, rowCount = 0;

        if (table == INPUT_TABLE){
            tableModel = ((DefaultTableModel) tableInput.getModel());
            selectedRow = tableInput.getSelectedRow();
            rowCount = tableInput.getRowCount();
            //Lascio sempre una riga
            if (rowCount == 1){
                return;
            }
        }
        else if (table == OUTPUT_TABLE){
            tableModel = ((DefaultTableModel) tableOutput.getModel());
            selectedRow = tableOutput.getSelectedRow();
            rowCount = tableOutput.getRowCount();
        }
        else{
            tableModel = ((DefaultTableModel) tableInterfacce.getModel());
            selectedRow = tableInterfacce.getSelectedRow();
            rowCount = tableInterfacce.getRowCount();
        }

        if (selectedRow >= 0) {
                tableModel.removeRow(selectedRow);
            }

        invalidate();
    }


}
